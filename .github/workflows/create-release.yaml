name: Create new release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'     
        required: true

jobs:
  create_release_pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Validate version
        run: |
          echo "${{ github.event.inputs.version }}" | grep -q -P '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$' || exit 1

      - name: Check if tag exists
        run: |
          git fetch --tags
          if git rev-parse "v${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "Tag already exists"
            exit 1
          fi

      - name: Replace values
        run: |
          sed -i "s|CHANGE_ME_VERSION|${{ github.event.inputs.version }}|" config/manager/kustomization.yaml
          sed -i "s|CHANGE_ME_IMAGE|ghcr.io/${{ github.repository }}|" config/manager/kustomization.yaml

      - name: Render manifests
        run: kustomize build deploy/ > render/manifests.yaml

      - name: Configure git
        run: |
          git config --local user.email "eryalitobot@gmail.com"
          git config --local user.name "Eryalito Bot"
          echo "${{ secrets.SSH_GITHUB }}" > /tmp/id_rsa
          chmod 600  /tmp/id_rsa
          git config core.sshCommand 'ssh -i  /tmp/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'

      - name: Import GPG key
        id: import-gpg
        run: |
          echo "${{ secrets.GPG_SIGN_64 }}" | base64 --decode | gpg --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Configure GPG
        run: |
          git config --local commit.gpgsign true
          git config --local user.signingkey $(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        id: cpr
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: Update version to ${{ github.event.inputs.version }}
          body: Update version to ${{ github.event.inputs.version }}
          commit-message: Update version to ${{ github.event.inputs.version }}
          author: Eryalito Bot <eryalitobot@gmail.com>
          committer: Eryalito Bot <eryalitobot@gmail.com>
          add-paths: render/manifests.yaml
          delete-branch: true
          labels: 'skip-ci'

    outputs:
      pr_number: ${{ steps.cpr.outputs.pull-request-number }}

  merge_pr:  
    needs: create_release_pr
    uses: ./.github/workflows/automerge-release-pr.yaml
    with:
      version: ${{ github.event.inputs.version }}
      pr_number: ${{ needs.create_release_pr.outputs.pr_number }}
    secrets:
      repo_creds: ${{ secrets.GITHUB_TOKEN }}

  build_and_publish:  
    needs: [create_release_pr, merge_pr]
    uses: ./.github/workflows/build-and-publish.yaml
    with:
      version: ${{ github.event.inputs.version }}
    secrets:
      repo_creds: ${{ secrets.GITHUB_TOKEN }}
